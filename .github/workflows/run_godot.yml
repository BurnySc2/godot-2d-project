name: Tests

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 2
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
#        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.7]
        godot-version: [3.2.2]

    steps:
      - uses: actions/checkout@v1

      # Reference: https://github.com/ceceppa/godot-gut-ci/blob/master/init-and-run-tests.sh#L23
      - name: Download Godot (Linux)
        run: |
          wget https://downloads.tuxfamily.org/godotengine/${{ matrix.godot-version }}/Godot_v${{ matrix.godot-version }}-stable_linux_headless.64.zip -q
          unzip Godot_v${{ matrix.godot-version }}-stable_linux_headless.64.zip
          rm Godot_v${{ matrix.godot-version }}-stable_linux_headless.64.zip
          mv Godot_v${{ matrix.godot-version }}-stable_linux_headless.64 godot
        if: matrix.os == 'ubuntu-latest'

      - name: Download Godot (macOS)
        run: |
          wget https://downloads.tuxfamily.org/godotengine/${{ matrix.godot-version }}/Godot_v${{ matrix.godot-version }}-stable_osx.64.zip -q
          unzip Godot_v${{ matrix.godot-version }}-stable_osx.64.zip
          rm Godot_v${{ matrix.godot-version }}-stable_osx.64.zip
          mv Godot.app/Contents/MacOS/Godot godot
        if: matrix.os == 'macos-latest'

      - name: Download Godot (Windows)
        run: |
          curl https://downloads.tuxfamily.org/godotengine/${{ matrix.godot-version }}/Godot_v${{ matrix.godot-version }}-stable_win32.exe.zip -O Godot_v${{ matrix.godot-version }}-stable_win32.exe.zip
          unzip Godot_v${{ matrix.godot-version }}-stable_win32.exe.zip
          rm Godot_v${{ matrix.godot-version }}-stable_win32.exe.zip
          move Godot_v${{ matrix.godot-version }}-stable_win32.exe godot.exe
        if: matrix.os == 'windows-latest'

      - name: Run Godot Tests (Linux, macOS)
        # The -d option tells Godot to run in debug mode which is helpful. The -s option tells Godot to run a script. --path $PWD tells Godot to treat the current directory as the root of a project. -gexit Exit after all tests have been run
        # When running from command line, 0 will be returned if all tests pass and 1 will be returned if any fail (pending doesn't affect the return value).
        # To run a single test:
        # ./godot -d -s --path $PWD addons/gut/gut_cmdln.gd -gselect=test_example.gd
        run: |
          ./godot -d -s --path $PWD addons/gut/gut_cmdln.gd -gexit
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'

# Doesnt seem to work properly - windows gets stuck
      - name: Run Godot Tests (Windows)
        run: |
          ./godot.exe -d -s --path $PWD addons/gut/gut_cmdln.gd -gexit
        if: matrix.os == 'windows-latest'

      - name: Prepare building binary (Linux)
        run: |
          wget https://downloads.tuxfamily.org/godotengine/${{ matrix.godot-version }}/Godot_v${{ matrix.godot-version }}-stable_export_templates.tpz -q
          mkdir -p /home/runner/.local/share/godot/templates/${{ matrix.godot-version }}.stable/
          unzip Godot_v${{ matrix.godot-version }}-stable_export_templates.tpz
          mv templates/* /home/runner/.local/share/godot/templates/${{ matrix.godot-version }}.stable/
          rm -r templates
          rm Godot_v${{ matrix.godot-version }}-stable_export_templates.tpz
        if: matrix.os == 'ubuntu-latest'

      - name: Create Linux binary
        run: |
          mkdir -p builds/linux
          ./godot -v --export "Linux/X11" builds/linux/linux_game
        if: matrix.os == 'ubuntu-latest'

      - name: Create macOS binary
        run: |
          mkdir -p builds/mac
          ./godot -v --export "Mac OSX" builds/mac/mac.z
        if: matrix.os == 'ubuntu-latest'

      - name: Create Windows binary
        run: |
          mkdir -p builds/win
          ./godot -v --export "Windows Desktop" builds/win/win_game.exe
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/upload-artifact@v1
        name: Upload Linux archive
        with:
          name: my_game_linux
          path: builds/linux/
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/upload-artifact@v1
        name: Upload macOS archive
        with:
          name: my_game_macOS
          path: builds/mac/
        if: matrix.os == 'ubuntu-latest'

      - uses: actions/upload-artifact@v1
        name: Upload Windows archive
        with:
          name: my_game_windows
          path: builds/win/
        if: matrix.os == 'ubuntu-latest'
